---
import { Trash } from "lucide-react";
import BaseForm from "./BaseForm.astro";
import ClientForm from "./clientForm.astro";
import ZitlancerForm from "./zitlancerForm.astro";

const { tContact, tDefault } = Astro.props;

const form = {
  name: "",
  email: "",
  message: "",
};
---

<form class="mx-auto mt-16 max-w-xl sm:mt-20">
  <BaseForm tBaseForm={tContact.base_form} form={form as any} />
  <div class="mx-auto max-w-xl mt-6">
    <div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
      <div class="col-span-2">
        <div class=""></div>
        <div
          class="font-semibold text-sm leading-6 text-gray-900"
          id="user-type-label"
        >
          <div data-type-enabled="false">Who are you?</div>
          <div class="items-center gap-2 hidden" data-type-enabled="true">
            <span>I'm want to be</span>
            <button
              id="remove-selection"
              type="button"
              class="flex items-center gap-1 cursor-pointer hover:text-secondary transition-all"
            >
              <span>(</span>
              <span>Remove Selection</span>
              <Trash className="text-red-500 size-4" />
              <span>)</span>
            </button>
          </div>
        </div>
        <div class="mt-2.5 grid grid-cols-2" id="user-type-buttons">
          <button
            class="items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 w-full block rounded-r-none"
            id="client-button"
            type="button"
            tabindex="0"
            style="transform: none;"
          >
            Client
          </button>
          <button
            class="items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 w-full block rounded-l-none"
            id="zitlancer-button"
            type="button"
            tabindex="0"
            style="transform: none;"
          >
            Zitlancer
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="mx-auto max-w-xl mt-6">
    <div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
      <ClientForm
        id="client-form"
        class="hidden"
        tClientForm={tContact.client_form}
        form={form as any}
      />
      <ZitlancerForm
        id="zitlancer-form"
        class="hidden"
        tZitLancerForm={tContact.zitlancer_form}
        tCountries={tDefault.countries}
        form={form as any}
      />
      <div id="form-footer" class="col-span-2 hidden">
        <div class="flex gap-x-4 col-span-2">
          <label
            class="relative inline-flex items-center cursor-pointer focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-indigo-600 rounded-xl"
          >
            <span class="sr-only">
              {tContact.privacy_policy.sr_only}
            </span>
            <input
              type="checkbox"
              value=""
              class="sr-only peer"
              id="privacy-policy"
            />
            <div
              class="bg-gray-200 w-8 h-5 rounded-full p-px ring-1 ring-inset ring-gray-900/5 transition-colors duration-200 ease-in-out
                  after:duration-300
                  peer-checked:bg-secondary peer-focus:outline-none after:rounded-full after:absolute after:bg-gray-50 after:outline-none after:size-4 after:top-1 after:left-[2px] after:flex after:justify-center after:items-center peer-checked:after:left-auto peer-checked:after:translate-x-[13px] peer-hover:after:scale-95"
            >
            </div>
          </label>
          <div>
            <label
              for="privacy-policy"
              class="text-sm leading-6 text-gray-600"
              data-headlessui-state=""
            >
              {tContact.privacy_policy.label}
            </label>
            <a
              target="_blank"
              class="font-semibold text-indigo-600"
              href="/legal/privacy-policy"
            >
              {tContact.privacy_policy.link_text}
            </a>
          </div>
        </div>

        <div class="mt-10 col-span-2">
          <button
            id="submit-button"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 w-full"
            type="submit"
            data-client-form={tContact.main_form.submit_messages.client}
            data-zitlancer-form={tContact.main_form.submit_messages.zitlancer}
            tabindex="0"
          >
          </button>
        </div>
      </div>
    </div>
  </div>
</form>

<script>
  let userType = null;
  const clientButton = document.getElementById(
    "client-button"
  ) as HTMLButtonElement;
  const zitlancerButton = document.getElementById(
    "zitlancer-button"
  ) as HTMLButtonElement;
  const usertypeLabel = document.getElementById(
    "user-type-label"
  ) as HTMLDivElement;
  const removeSelection = document.getElementById(
    "remove-selection"
  ) as HTMLButtonElement;
  const userTypeButtons = document.getElementById(
    "user-type-buttons"
  ) as HTMLDivElement;
  const clientForm = document.getElementById("client-form") as HTMLDivElement;
  const zitlancerForm = document.getElementById(
    "zitlancer-form"
  ) as HTMLDivElement;
  const formFooter = document.getElementById("form-footer") as HTMLDivElement;
  const submitButton = document.getElementById(
    "submit-button"
  ) as HTMLButtonElement;

  const setUserType = (type: string | null) => {};

  clientButton.addEventListener("click", () => {
    setUserType("client");

    clientForm.classList.remove("hidden");
    zitlancerForm.classList.add("hidden");
    clientButton.classList.add("w-full");
    clientButton.classList.remove("rounded-r-none");
    clientButton.setAttribute("disabled", "true");
    zitlancerButton.classList.add("hidden");
    userTypeButtons.classList.remove("grid-cols-2");
    userTypeButtons.classList.add("grid-cols-1");
    formFooter.classList.remove("hidden");
    submitButton.textContent = submitButton.getAttribute("data-client-form");
    submitButton.classList.remove("bg-primary");
    submitButton.classList.add("bg-secondary");

    usertypeLabel
      ?.querySelector("[data-type-enabled='false']")
      ?.classList.add("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='true']")
      ?.classList.remove("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='true']")
      ?.classList.add("flex");
  });

  zitlancerButton.addEventListener("click", () => {
    setUserType("zitlancer");
    zitlancerForm.classList.remove("hidden");
    clientForm.classList.add("hidden");
    zitlancerButton.classList.add("w-full");
    zitlancerButton.classList.remove("rounded-l-none");
    zitlancerButton.setAttribute("disabled", "true");
    clientButton.classList.add("hidden");
    userTypeButtons.classList.remove("grid-cols-2");
    userTypeButtons.classList.add("grid-cols-1");
    formFooter.classList.remove("hidden");
    submitButton.textContent = submitButton.getAttribute("data-zitlancer-form");
    submitButton.classList.remove("bg-secondary");
    submitButton.classList.add("bg-primary");

    usertypeLabel
      ?.querySelector("[data-type-enabled='false']")
      ?.classList.add("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='true']")
      ?.classList.remove("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='true']")
      ?.classList.add("flex");
  });

  removeSelection.addEventListener("click", () => {
    setUserType(null);
    clientForm.classList.add("hidden");
    zitlancerForm.classList.add("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='false']")
      ?.classList.remove("hidden");
    usertypeLabel
      ?.querySelector("[data-type-enabled='true']")
      ?.classList.add("hidden");
    formFooter.classList.add("hidden");

    clientButton.classList.remove("w-full");
    clientButton.classList.remove("hidden");
    clientButton.classList.add("rounded-r-none");
    clientButton.removeAttribute("disabled");
    zitlancerButton.classList.remove("hidden");
    zitlancerButton.classList.remove("w-full");
    zitlancerButton.classList.add("rounded-l-none");
    zitlancerButton.removeAttribute("disabled");
    userTypeButtons.classList.remove("grid-cols-1");
    userTypeButtons.classList.add("grid-cols-2");
    submitButton.textContent = "";
  });

  const formValidation = submitButton.addEventListener("click", (e) => {
    e.preventDefault();
    console.log("submit");
  });
</script>
