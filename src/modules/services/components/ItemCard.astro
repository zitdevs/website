---
import { cva, type VariantProps } from "class-variance-authority";
import DynamicIcon from "../../../components/icons/DynamicIcon.astro";
import { cn } from "../../../lib/utils";
import BounceCard from "./BounceCard.astro";
import CardTitle from "./CardTitle.astro";

const containerVariants = cva(
  "absolute bottom-0 left-4 right-4 top-32 translate-y-8 rounded-t-2xl bg-gradient-to-br p-4 transition-transform duration-[250ms]",
  {
    variants: {
      variant: {
        blue: "from-secondary to-indigo-400",
        dark: "from-primary to-slate-800",
        orange: "from-amber-400 to-orange-400",
        pink: "from-fuchsia-600 to-red-400",
      },
      textAlignment: {
        left: "text-left",
        center: "text-center",
        right: "text-right",
      },
      animation: {
        none: "",
        default:
          "translate-y-8 group-hover:translate-y-4 group-hover:rotate-[2deg]",
        allUp:
          "translate-y-2 md:translate-y-6 group-hover:-translate-y-14 group-hover:-rotate-[1deg]",
      },
    },
    defaultVariants: {
      variant: "blue",
      textAlignment: "center",
      animation: "default",
    },
  },
);

const colsVariants = cva("col-span-12", {
  variants: {
    variant: {
      blue: "col-span-12 md:col-span-6 lg:col-span-7",
      dark: "col-span-12 md:col-span-6 lg:col-span-5",
      orange: "col-span-12 md:col-span-6 lg:col-span-5",
      pink: "col-span-12 md:col-span-6 lg:col-span-7",
    },
    cols: {
      full: "col-span-12 md:col-span-12 lg:col-span-12",
      mid: "col-span-12 md:col-span-6 lg:col-span-6",
      mid2: "col-span-12 md:col-span-6 lg:col-span-6",
      none: "!col-span-1",
    },
  },
  defaultVariants: {
    variant: "blue",
  },
});

type Props = VariantProps<typeof containerVariants> &
  VariantProps<typeof colsVariants> & {
    title: string;
    description: string | string[];
    icon: string;
    classes?: {
      container?: string;
      card?: string;
    };
    cta?: {
      href: string;
      text: string;
    };
  };

const {
  description,
  icon,
  title,
  variant,
  cols,
  classes,
  textAlignment,
  animation,
  cta,
} = Astro.props;
---

<BounceCard className={cn(colsVariants({ variant, cols }), classes?.card)}>
  <CardTitle class="text-2xl md:text-3xl text-center">
    <span class="flex items-center gap-2 justify-center">
      {title}
      <DynamicIcon icon={icon} className="size-5 inline" aria-hidden />
    </span>
  </CardTitle>
  <div
    class={cn(
      "relative",
      containerVariants({ variant, textAlignment, animation }),
      classes?.container,
    )}
  >
    {
      description instanceof Array ? (
        description.map((desc) => (
          <p class=" font-semibold text-indigo-50 text-sm mb-4 line-clamp-2 sm:line-clamp-3 md:line-clamp-2 lg:line-clamp-none">
            {desc}
          </p>
        ))
      ) : (
        <p class="block font-semibold text-indigo-50 text-sm">{description}</p>
      )
    }
    {
      cta && (
        <a
          href={cta?.href}
          class="block mt-8 font-bold text-white underline mx-auto before:absolute before:content-[''] before:w-full before:h-full before:top-0 before:left-0"
        >
          {cta?.text}
        </a>
      )
    }
  </div>
</BounceCard>
